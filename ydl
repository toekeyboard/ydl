#!/bin/bash


# USAGE:
#	 ydl123 -l LANGS https://www.youtube.com/channel/CHANNELID  
#	 ydl123 -l LANGS https://www.youtube.com/user/USERNAME  
#	 ydl123 -l LANGS https://www.youtube.com/USERNAME  


#-l 	LANGS Languages of the subtitles to download separated by commas
#-m 	MAX number of videos to download from channel
	#MAX numero de videos a download.  deafult es 'all'.  pages de 30 video chqaue fois.
	#	to download all  "-m all"

#d/ 	Videos and subtitles stored in this directory (under channel or username)










#voir si online ou offline
#ping_result=`ping -c 1 youtube.com | grep -m 1 -o -P --color 'Temporary failure' `
ping_result=`ping -c 1 youtube.com 2>&1 | grep -m 1 -o -P --color 'Temporary failure' `

#ping_result=`ping -c 1 youtube.com 2>&1 | grep -n -o -P --color 'ping: youtube.com: Temporary failure in name resolution' `
#echo $ping_result
#ping_result=$(ping -c 1 youtube.com)
#ping_result=`ping -c 1 youtube.com | grep -m 1 -n -o -P --color 'Temporary failure in name resolution'  `
#ping_result=`ping -c 1 youtube.com | grep -m 1 -n -o -P --color 'PING youtube.com'  `
#ping_result=`echo 'ping: youtube.com: Temporary failure in name resolution'  `
#ping_result=$(echo `ping -c 1 youtube.com | grep -m 1 -n -P --color 'PING youtube.com \(74\.125\.21\.190\) 56\(84\) bytes of data\.'  `)




#0	online
#1	offline
offline=0

#if [[ $ping_result == "1:PING youtube.com" ]]; then
#if [[ $ping_result == "ping: youtube.com: Temporary failure in name resolution" ]]; then
if [[ $ping_result == "Temporary failure" ]]; then
	offline=1
	echo $offline
fi

echo 'Loading...'







#http://stackoverflow.com/questions/192249/how-do-i-parse-command-line-arguments-in-bash
while [[ $# -gt 1 ]]
do
	key="$1"

	case $key in
		#-l 	LANGS Languages of the subtitles to download separated by commas
		-l|--langs)
			LANGS="$2"
			shift # past argument
			;;

		#-m 	MAX number of videos to download from channel
		#MAX numero de videos a download.  deafult es 'all'.  pages de 30 video chqaue fois.
		-m|--max)
			MAX="$2"
			shift # past argument
			;;
		#--default)
		#	DEFAULT=YES
		#	;;

		*)
			# unknown option
			;;
	esac
	shift # past argument or value			sauter le valeur

done



##### LANGS option
if [ -z "$LANGS" ]; then
	LANGS=0
fi




##### MAX video option
re='^[0-9]+$'

#voir si c'est 'all'
if [[ $MAX -eq "all" ]]; then
	MAX_VIDS="all"
#voir si c'est un numbero
#http://stackoverflow.com/questions/806906/how-do-i-test-if-a-variable-is-a-number-in-bash#3951175
elif [[ $MAX =~ $re ]] ; then
	MAX_VIDS=$MAX
	#echo "error: Not a number" >&2; exit 1
#si pas de valeur
elif [[ -z $MAX ]]; then
	#no 0m entered
	#MAX_VIDS=$((90))
	MAX_VIDS="all"
else
	echo "-m not an accepted value.  Input number or 'all'"
	exit
fi


#### URL option
#si le URL n'est pas la
if [ -z $1 ]; then
	echo "!Enter youtube URL"
	exit
fi

if [ -n $1 ]; then
	URL=$1
fi

#if [[ ${LIST} eq "1" ]]; then
#   youtube-dl ${URL} --list-subs
#   exit
#fi






#creer d/ download directory
mkdir -- d 2> /dev/null
cd d/


#trouve premiere langue
first_lang=$(echo $LANGS | cut -d',' -f1)
#echo $first_lang

mkdir -- $first_lang 2> /dev/null
cd $first_lang/
#echo $LANGS | perl -p -e 's/(.*)?(,.*)/$1/g'
#echo $LANGS | perl -p -e 's/(.*)?(,)*/$1/g'





#check si c'est seulement video URL:   https://www.youtube.com/watch?v=VIDEOID
solo=$(echo $URL | perl -p -e 's/.*(watch\?v\=).*/solo/g')

if [[ $solo == "solo" ]]; then
	VIDEO_URL=$URL

	rm watch* 2> /dev/null
	wget ${URL}
	#wget -q ${URL}
	#prend le channel nom
	URL="https://www.youtube.com$(grep -n --color -o 'watch7-user-header.*' watch?* | cut -f5 -d\")"
	rm watch* 2> /dev/null		#netoyer

fi








if [[ $offline == 0 ]]; then
	

	#trouve le nom propre / canonical de le chaine
	#prends le propre URL
	#ie: 		http://youtube.com/jimmykimmellive
	#retourner:	https://www.youtube.com/user/JimmyKimmelLive
	#convert si miniscule, a masculin

	CHANNEL_OR_USER=$(echo ${URL} | awk -F '/' '{print $NF}')
	#voir si directory exists
	cd_result=`find . "${CHANNEL_OR_USER}" -type f 2>&1 | grep -m 1 "\/${CHANNEL_OR_USER}\/${CHANNEL_OR_USER}" | cut -d\/ -f3`
	if [[ $cd_result != "${CHANNEL_OR_USER}" ]]; then

		rm Canonical-name-search 2> /dev/null
		wget ${URL} -O Canonical-name-search
		#wget -q ${URL} -O temp
		URL=$(<Canonical-name-search grep -m 1 -n -P --color 'canonical.*' | cut -f4 -d"\"")

		#channel_name=`<Canonical-name-search grep -m 1 -no --color '<meta name=\"title\" content=\".*' | cut -f4 -d"\"" `
		#echo -n '######################################## '; echo -n $URL; echo -n '    '; echo $channel_name; echo

		#rm temp 2> /dev/null



		#prends le nomme de channel ou user
		#-F field seperator
		#man awk:    The variable NF is set to the total number of fields in the input record.
		#$NF   - last field
		CHANNEL_OR_USER=$(echo ${URL} | awk -F '/' '{print $NF}')
		#####download le channel webpage
		#https://www.cyberciti.biz/faq/linuxunix-move-file-starting-with-a-dash/
		#mkdir -- d 2> /dev/null
		mkdir -- ${CHANNEL_OR_USER} 2> /dev/null
		mv -- Canonical-name-search ${CHANNEL_OR_USER}/${CHANNEL_OR_USER} 2> /dev/null

	fi


	cd -- ${CHANNEL_OR_USER}
	#rm videos_list 2> /dev/null



	#http://unix.stackexchange.com/questions/64672/how-to-cut-select-a-field-from-text-line-counting-from-the-end#64673
	#si il y a 'videos' a la fin
	#if [[ $CHANNEL_OR_USER == "videos" ]]; then
	#	CHANNEL_OR_USER=$(echo ${URL} | awk -F '/' '{print $(NF-1)}')
	#	#prend URL addres sans videos
	#	URL=$(echo ${URL} | rev | cut -f2- -d"/" | rev)
	#fi


	#si il y a '/' a la fin, enlever le '/' a le find de le URL
	#if [ -z "${CHANNEL_OR_USER}" ]; then
	#	CHANNEL_OR_USER=$(echo ${URL} | awk -F '/' '{print $(NF-1)}')
	#	URL=$(echo ${URL} | rev | cut -f2- -d"/" | rev)
	#fi

	# echo ${URL} | rev | cut -f2 -d"/" | rev
	# echo https://www.youtube.com/user/UPM/ | awk -F '/' '{print $(NF-1)}'
	# echo https://www.youtube.com/user/UPM/ | rev | cut -f2 -d"/" | rev



	####download pages
	####wget pages

	##download channel homepage
	#rm ${CHANNEL_OR_USER} 2> /dev/null
	#wget $URL
	#wget -q $URL
	#system("cd -- d/$channel_or_user; rm $channel_or_user 2> /dev/null");
	#system("cd -- d/$channel_or_user; wget -q $channel_or_user_url");


	#prends search video info
	rm results 2> /dev/null
	CHANNEL_SEARCH="https://www.youtube.com/results?q=${CHANNEL_OR_USER}&sp=EgIQAg%253D%253D"
	wget "${CHANNEL_SEARCH}" -O results
	#wget -q "${CHANNEL_SEARCH}" -O results
	#system("cd -- d/$channel_or_user; rm results* 2> /dev/null");
	#system("cd -- d/$channel_or_user; wget -q 'https://www.youtube.com/results?q=$channel_or_user&sp=EgIQAg%253D%253D' -O results ");




	# imprimer channel stats
	#####print channel title and statistics

	channel_url=`<${CHANNEL_OR_USER} grep -m 1 -n -P --color 'canonical.*' | cut -f4 -d"\"" ` ;
	channel_name=`<${CHANNEL_OR_USER} grep -no --color '<meta name=\"title\" content=\".*' | cut -f4 -d"\"" ` ;


	#channel num videos
	#sortir ${CHANNEL_OR_USER} de le string, avec ' ' 
	channel_num_videos=`<results grep -m 1 -noP --color 'yt-lockup-content.*'${CHANNEL_OR_USER}'.*' | grep -oP 'yt-lockup-meta-info.*?videos' | cut -d'>' -f3 ` ;

	#channel description
	channel_description=`<results grep -m 1 -noP --color 'yt-lockup-content.*'${CHANNEL_OR_USER}'.*' | grep -oP 'yt-lockup-description.*</div' | cut -d'>' -f2 | cut -d'<' -f1 ` ;

	#channel subscriber count
	channel_subscribers=`<results grep -m 1 -noP --color 'yt-lockup-content.*'${CHANNEL_OR_USER}'.*' | grep -oP 'yt-subscriber-count.*' | cut -d"\"" -f3 ` ;

	echo -n '######################################## '; echo -n $channel_url; echo -n '    '; echo $channel_name
	echo -n '################################ '; echo $channel_num_videos 
	echo -n '################################ '; echo -n $channel_subscribers; echo -n ' '; echo subscribers 
	echo -n '################################ '; echo $channel_description








	#prends homepage nom
	#homepage=`find ${CHANNEL_OR_USER} 2> /dev/null`

	#download channel homepage
	#if [ -z "$homepage" ]; then
	#	wget -q ${URL}
	#fi

	#name=$(grep "<title>" ${CHANNEL_OR_USER} | cut -f3- -d' ')
	#echo "============ $name ==== ${URL} ============"


	#download videos page
	#wget ${URL}/videos 


	#seulment 1 vieo
	if [[ $solo == "solo" ]]; then
		#creer pour single video
		echo $VIDEO_URL | grep -no --color "watch?v=.*" | cut -f2 -d'=' | cut -f1 -d"\"" > videos_list
		rm videos_time 2> /dev/null; touch videos_time

	#plusieur videos
	else
		#creer video list
		rm videos 2> /dev/null
		wget ${URL}/videos 
		#wget -q ${URL}/videos 
		####get list of videos from webpage
		#grep "Duration" videos 2> /dev/null | grep -no --color "watch?v=.*" | cut -f2 -d'=' | cut -f1 -d"\"" > videos_list
		( grep --color "data-context-item-id" videos | cut -d\" -f2 ) > videos_list
		( grep --color "video-time" videos | cut -d\> -f4 | cut -d\< -f1 ) > videos_time

		#mettres les resultats et errors dans std out
		diffresult=$(diff videos_list videos_list_old 2>&1)
		#	echo -n '123'; echo $diffresult
		cp videos_list videos_list_old

		
		#sur nouveau chaine, ou des nouveau videos
		if [ -n "$diffresult" ]; then

			#prends les prochaine trent, par le ajax / javacript "Load more".  peut seulment appuyer un fois
			#prends le initial http://www.youtube.com/user/videos link
			browse_ajax=$(grep -oP --color "browse_ajax.*" videos | cut -d\" -f1)



			current_vid_count=$((`cat videos_list 2> /dev/null | wc -l`))
			stop_flag=0


			#first_page=1
			#http://www.tldp.org/LDP/abs/html/comparison-ops.html
			if [[ (-z $browse_ajax) ]]; then
				count_vids=$current_vid_count
			else
				count_vids=$((30))
			fi
			echo -n '++++++++++ '; echo -n $count_vids; echo -n ' / '; echo $channel_num_videos



			#voir si c'est tout les videos
			if [[ $MAX_VIDS -eq "all" ]]; then
				#MAX_VIDS= $((`echo $channel_num_videos | cut -d" " -f1`))

				num=$(echo $channel_num_videos | cut -d" " -f1);
				#si plus grand que 1,000 videos, existe un ',' dans le nombre
				if [[ -n $(echo $num | grep ",") ]]; then
					num=999
				fi

				MAX_VIDS=$(($num))
				#$MAX_VIDS=$((echo $channel_num_videos | cut -d" " -fa1l)) ;
			fi
			#echo $MAX_VIDS


			#http://www.tldp.org/LDP/abs/html/comparison-ops.html
			#bug dans youtube.  adjouter 1?
			if [[ $(($MAX_VIDS)) -le $((current_vid_count + 1)) ]]; then
				stop_flag=1
			fi

			#continue si on n'a pas deja downloaded les videos	
			if [[ $stop_flag -eq "0" ]]; then
				#while [[ (-n $browse_ajax) || first_page -eq 1 ]]
				while [[ (-n $browse_ajax) ]]
				do

					rm browse 2> /dev/null
					wget -q "http://www.youtube.com/$browse_ajax" -O browse
					( grep -noP --color "title=.*?watch\?" browse | grep -noP --color "data-video-ids.*" | cut -d\" -f2 | cut -d\\ -f1 ) >> videos_list
					( grep -noP --color "Duration: .*?yt-lockup-meta" browse | grep -noP --color ".*\." | cut -d\: -f4 | cut -d" " -f2-  ) >> videos_time
					#browse_ajax=$(grep -oP --color "browse_ajax.*" browse | cut -d\" -f1 )
					browse_ajax=$(grep -oP --color "browse_ajax.*" browse | cut -d\" -f1 | perl -p -e 's/\\u0026/\&/g' | cut -d\\ -f1 )


					#http://stackoverflow.com/questions/6348902/how-can-i-add-numbers-in-a-bash-script#6348941	
					difference=$(($MAX_VIDS - $count_vids))
					#echo $MAX_VIDS
					#echo $count_vids
					#echo $difference
					if [[ $(($difference)) -le $((30)) ]]; then
						#echo a
						count_vids=$((count_vids + $difference))
						#echo $count_vids
					else
						#echo b
						count_vids=$((count_vids + 30))
					fi


					#si c'est plus grand que -m MAX, sortir de loop
					#si c'est 'all' ne va pas entre, car expression est faux
					if [[ $(($count_vids)) -ge $(($MAX_VIDS)) ]]; then 
						#actuellement, trouve le prochaine page,  990+30=1020
						echo -n '++++++++++ '; echo -n $MAX_VIDS; echo " Max"
						break;
					else
						echo -n '++++++++++ '; echo -n $count_vids; echo -n ' / '; echo $channel_num_videos
						#echo -n '++++++++++ '; echo -n $count_vids; echo -n ' / '; echo -n $channel_num_videos ; echo -n '    '; echo $browse_ajax; echo
					fi







				done

				echo	
				#exit
			fi	


		fi
		


	fi



	#-q quiet
	#-b  background process
	#wget -b ${URL}/videos 

	#1> /dev/null 
	#2> /dev/null
	#2>&1 > /dev/null


else
	#offline


	CHANNEL_OR_USER=$(echo ${URL} | awk -F '/' '{print $NF}')

	#voir si directory exists
	cd_result=`cd -- ${CHANNEL_OR_USER} 2>&1 | grep -m 1 -o -P --color 'No such file or directory' `
	if [[ $cd_result == "No such file or directory" ]]; then
		echo "No such CHANNEL or USERNAME"
		exit
	fi
	
	#entre dans directory
	cd -- ${CHANNEL_OR_USER}


#print title




	#channel_name=`<${CHANNEL_OR_USER} grep -m 1 -no --color '<meta name=\"title\" content=\".*' | cut -f4 -d"\"" `
	#echo -n '######################################## '; echo -n $URL; echo -n '    '; echo $channel_name; echo

	#echo -n '================================ '; echo -n $URL; echo -n '    '; echo $channel_name; echo


	#http://superuser.com/questions/294161/unix-linux-find-and-sort-by-date-modified#294164
	if [[ $LANGS == 0 ]]; then
		find . -iname "*.3gp" -printf '%T@ %p\n' | sort -k 1nr  | cut -f2 -d\/ > videos_list
	else
		find . -iname "*_${LANGS}.vtt" -printf '%T@ %p\n' | sort -k 1nr | cut -f2 -d\/ > videos_list
	fi

	rm videos_time 2> /dev/null; touch videos_time


fi
	

#sortir de d/{CHANNEL_OR_USER> directory, retourner a root directory
cd ../../..


#echo "################################################################################################"


#./s.pl -l ${LANGS} ${URL} ${CHANNEL_OR_USER}
./s.pl -l ${LANGS} ${URL} ${CHANNEL_OR_USER} $offline
#./s.pl ${LANGS} ${CHANNEL_OR_USER}


#echo $LANGS
#echo $URL
#echo $CHANNEL_OR_USER
#echo $offline
#exit






#http://mandrivausers.org/index.php?/topic/21998-reading-a-text-file-line-by-line-with-bash/

#while read line; do
#        videoid=$line
#
#        while read line2; do
#                search_result=$(echo $line2 | grep --color "data-context-item-id" | cut -d\" -f2)
#                if [[ $search_result == $videoid ]]; then
#                        #$videoid=`grep "Duration" videos | grep -no --color "watch?v=.*" | cut -f2 -d'=' | cut -f1 -d\" `
#                        echo hello
#                        break;
#                        #echo $videoid
#                fi
#        done < videos
#done < videos_list
#$videoid=`grep "Duration" videos | grep -no --color "watch?v=.*" | cut -f2 -d'=' | cut -f1 -d\" `






#bash  equations
#http://www.tldp.org/LDP/abs/html/comparison-ops.html

#2> /dev/null		//redirect out to null  (do not print)
#2>&1			//redirect out and errors to std out
#2>&1 > /dev/null	//redirect out and errors to null

